/* 
 * Copyright (c) 2007, Fraunhofer-Gesellschaft
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the disclaimer at the end.
 *     Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 * 
 * (2) Neither the name of Fraunhofer nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 * 
 * DISCLAIMER
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */
package org.ogf.graap.wsag.server.actions.impl;

import java.text.MessageFormat;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.xmlbeans.XmlObject;
import org.ogf.graap.wsag.api.Agreement;
import org.ogf.graap.wsag.api.AgreementFactoryContext;
import org.ogf.graap.wsag.api.AgreementOffer;
import org.ogf.graap.wsag.api.exceptions.AgreementFactoryException;
import org.ogf.graap.wsag.api.exceptions.NegotiationException;
import org.ogf.graap.wsag.api.logging.LogMessage;
import org.ogf.graap.wsag.server.actions.ActionInitializationException;
import org.ogf.graap.wsag.server.actions.IAction;
import org.ogf.graap.wsag.server.actions.ICreateAgreementAction;
import org.ogf.graap.wsag.server.actions.IGetTemplateAction;
import org.ogf.graap.wsag.server.actions.INegotiationAction;
import org.ogf.graap.wsag.server.api.WsagSession;
import org.ogf.graap.wsag.server.api.WsagSessionManager;
import org.ogf.graap.wsag.server.engine.WsagEngine;
import org.ogf.graap.wsag4j.types.configuration.ImplementationConfigurationType;
import org.ogf.graap.wsag4j.types.engine.WSAG4JSessionDocument;
import org.ogf.graap.wsag4j.types.engine.WSAG4JSessionType;
import org.ogf.schemas.graap.wsAgreement.AgreementContextType;
import org.ogf.schemas.graap.wsAgreement.AgreementRoleType;
import org.ogf.schemas.graap.wsAgreement.AgreementTemplateType;
import org.ogf.schemas.graap.wsAgreement.negotiation.NegotiationOfferType;
import org.w3c.dom.Node;

/**
 * This class implements a WSAG4J agreement factory action. A factory action contains a set of strategies to
 * generate an agreement template, to negotiate offers based on this template and to create agreements based
 * on the template. The strategies are configured in the WSAG4J engine configuration file.
 * 
 * @see IGetTemplateAction
 * @see INegotiationAction
 * @see ICreateAgreementAction
 * 
 * @author Oliver Waeldrich
 * 
 */
public class AgreementFactoryAction
    implements IAction
{

    private static final Logger LOG = Logger.getLogger( AgreementFactoryAction.class );

    private ICreateAgreementAction createAgreementAction;

    private IGetTemplateAction getTemplateAction;

    private INegotiationAction negotiationAction;

    private boolean useSession = false;

    private boolean supportsNegotiation = false;

    private String name;

    /**
     * Creates a new {@link AgreementFactoryAction}.
     * 
     * @param templateAction
     *            The {@link IGetTemplateAction} that is called to generate the agreement template for this
     *            {@link AgreementFactoryAction}.
     * 
     * @param createAgreementAction
     *            The {@link ICreateAgreementAction} that is called when an agreement is created based on the
     *            template generated by this {@link AgreementFactoryAction}.
     * 
     * @param negotiationAction
     *            The negotiation action that is called when a negotiation offer based on the agreement
     *            template provided by this action was received.
     */
    public AgreementFactoryAction( IGetTemplateAction templateAction,
                                   ICreateAgreementAction createAgreementAction,
                                   INegotiationAction negotiationAction )
    {
        super();

        setGetTemplateAction( templateAction );
        setCreateAgreementAction( createAgreementAction );
        setNegotiationAction( negotiationAction );
    }

    /**
     * Indicates whether this action supports agreement negotiation or not. Negotiation is supported if the
     * associated negotiation action is not null and not an instance of {@link NegotiationUnsupportedAction}
     * 
     * @return true, if negotiation is supported, otherwise false
     * 
     * @see #setNegotiationAction(INegotiationAction)
     */
    public boolean isNegotiationSupported()
    {
        return supportsNegotiation;
    }

    /**
     * Sets the template creation strategy for this factory action.
     * 
     * @param templateAction
     *            the template creation strategy to set
     */
    public void setGetTemplateAction( IGetTemplateAction templateAction )
    {
        getTemplateAction = templateAction;
    }

    /**
     * Sets the SLA creation strategy for this factory action.
     * 
     * @param createAgreement
     *            the agreement creation strategy to set
     */
    public void setCreateAgreementAction( ICreateAgreementAction createAgreement )
    {
        createAgreementAction = createAgreement;
    }

    /**
     * Sets the negotiation strategy for this factory action.
     * 
     * @param negotiationAction
     *            the negotiation action to set
     */
    public void setNegotiationAction( INegotiationAction negotiationAction )
    {
        this.negotiationAction = negotiationAction;
        if ( ( negotiationAction == null ) || ( negotiationAction instanceof NegotiationUnsupportedAction ) )
        {
            supportsNegotiation = false;
        }
        else
        {
            supportsNegotiation = true;
        }
    }

    /**
     * {@inheritDoc}
     * 
     * @see org.ogf.graap.wsag.server.actions.IAction#initialize()
     */
    @Override
    public void initialize() throws ActionInitializationException
    {
        if ( ( getTemplateAction == null ) || ( createAgreementAction == null ) )
        {
            throw new ActionInitializationException(
                "getTemplateAction and createAgreementAction must not be null." );
        }

        try
        {
            getTemplateAction.initialize();
            createAgreementAction.initialize();
            negotiationAction.initialize();
        }
        catch ( Exception e )
        {
            //
            // create error message and throw initialization exception
            //
            String detailsText =
                "Configured actions: GetTemplateAction [{0}], NegotiationAction: {1}), CreateAgreementAction: {2})";

            String details =
                LogMessage.format( detailsText, getTemplateAction.getClass().getName(),
                    negotiationAction.getClass().getName(), createAgreementAction.getClass().getName() );

            String msgText = "Error while initializing AgreementFactoryAction. \nReason: {0} \nDetails: {1}";
            String message = LogMessage.format( msgText, e.getMessage(), details );

            throw new ActionInitializationException( message, e );
        }
    }

    /**
     * Returns the agreement template associated with this factory action.
     * 
     * @return the associated agreement template
     * 
     * @see AgreementTemplateType
     */
    public AgreementTemplateType getTemplate()
    {

        AgreementTemplateType template = getTemplateAction.getTemplate();
        template = (AgreementTemplateType) template.copy();

        if ( useSession )
        {

            AgreementContextType context = template.getContext();

            //
            // we create a new session for each time a template is requested
            //
            WsagSession session = WsagSessionManager.createSession();

            //
            // If no context is defined in the template, we create a default context
            //
            if ( context == null )
            {
                context = template.addNewContext();
                context.setTemplateId( template.getTemplateId() );
                context.setTemplateName( template.getName() );
                context.setServiceProvider( AgreementRoleType.AGREEMENT_RESPONDER );
            }

            //
            // finally, we create the session document and append it to the context
            //
            WSAG4JSessionDocument sessionDoc = WSAG4JSessionDocument.Factory.newInstance();
            sessionDoc.addNewWSAG4JSession().setSessionID( session.getSessionId() );
            Node imported =
                context.getDomNode().getOwnerDocument()
                       .importNode( sessionDoc.getWSAG4JSession().getDomNode(), true );
            context.getDomNode().appendChild( imported );
        }

        return template;
    }

    /**
     * Invokes the create agreement strategy implemented by the {@link ICreateAgreementAction} which is set
     * for this action
     * 
     * @param offer
     *            the offer for which an agreement should be created
     * @param context
     *            factory invocation context
     * 
     * @return the agreement instance created by the {@link ICreateAgreementAction}
     * 
     * @throws AgreementFactoryException
     *             the exception thrown by the {@link ICreateAgreementAction}
     * 
     * @see #setCreateAgreementAction(ICreateAgreementAction)
     */
    public Agreement createAgreement( AgreementOffer offer, Map<String, Object> context )
        throws AgreementFactoryException
    {
        XmlObject[] sessionDocuments =
            offer.getContext().selectChildren( WSAG4JSessionDocument.type.getDocumentElementName() );
        if ( sessionDocuments.length > 0 )
        {
            if ( sessionDocuments.length > 1 )
            {
                String message =
                    "Found multiple wsag4j session documents in agreement context. Using the first, ignoring the rest.";
                LOG.warn( message );
            }

            WSAG4JSessionType sessionToken = (WSAG4JSessionType) sessionDocuments[0];

            WsagSession session = WsagSessionManager.getSession( sessionToken.getSessionID() );
            if ( session != null )
            {
                createAgreementAction.getHandlerContext().setSession( session );
            }
            else
            {
                Object[] filler = new Object[] { sessionToken.getSessionID() };
                String message = MessageFormat.format( "WSAG4J session with id [{0}] not found.", filler );
                LOG.error( message );
            }
        }

        return createAgreementAction.createAgreement( offer, context );
    }

    /**
     * Implements the negotiation strategy for offers that are based on the template associated with this
     * action.
     * 
     * @param quote
     *            the quote to negotiate
     * 
     * @param context
     *            implementation specific context
     * 
     * @return the counter offers produced by the negotiation strategy
     * 
     * @throws NegotiationException
     *             An exception thrown by the negotiation strategy. See
     *             {@link #setNegotiationAction(INegotiationAction)}.
     * 
     * @see INegotiationAction
     */
    public NegotiationOfferType[] negotiate( NegotiationOfferType quote, Map<String, Object> context )
        throws NegotiationException
    {

        //
        // An agreement factory does not need to support negotiation.
        // If no negotiation action is set, we throw an unsupported
        // operation exception.
        //
        if ( negotiationAction == null )
        {
            String message = "Negotiation is not supported by this agreement factory";
            throw new UnsupportedOperationException( message );
        }

        return negotiationAction.negotiate( quote, context );
    }

    /**
     * @return true - if this {@link AgreementFactoryAction} is session aware. false - otherwise
     */
    public boolean isUsingSession()
    {
        return useSession;
    }

    /**
     * @param useSession
     *            Specifies whether an {@link AgreementFactoryAction} is session aware or not.
     */
    public void setUseSession( boolean useSession )
    {
        this.useSession = useSession;
    }

    /**
     * @return The name configured for this action.
     */
    public String getName()
    {
        if ( name == null )
        {
            return getClass().getName();
        }

        return name;
    }

    /**
     * @param name
     *            Sets the name for this {@link AgreementFactoryAction}.
     */
    public void setName( String name )
    {
        this.name = name;
    }

    /**
     * <!-- begin-UML-doc --> The configuration of this {@link AgreementFactoryAction}. <!-- end-UML-doc -->
     * 
     * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
     */
    private ImplementationConfigurationType actionConfiguration;

    /**
     * <!-- begin-UML-doc --> Returns the configuration of this particular {@link AgreementFactoryAction}
     * instance. <!-- end-UML-doc -->
     * 
     * @return The configuration of this {@link AgreementFactoryAction} instance.
     * 
     * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
     */
    @Override
    public ImplementationConfigurationType getActionConfiguration()
    {
        // begin-user-code
        return actionConfiguration;
        // end-user-code
    }

    /**
     * <!-- begin-UML-doc --> Sets the configuration for this object. <!-- end-UML-doc -->
     * 
     * @param configuration
     *            The {@link AgreementFactoryAction} configuration to set.
     * 
     * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
     */
    @Override
    public void setActionConfiguration( ImplementationConfigurationType configuration )
    {
        // begin-user-code
        this.actionConfiguration = configuration;
        // end-user-code
    }

    /**
     * <!-- begin-UML-doc --> The context of the agreement factory where this action is deployed in. <!--
     * end-UML-doc -->
     * 
     * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
     */
    private AgreementFactoryContext factoryContext;

    private WsagEngine engine;

    /**
     * <!-- begin-UML-doc --> Allows implementations to access the context of the agreement factory in which
     * this action was deployed. <!-- end-UML-doc -->
     * 
     * @return The context of the factory in which this action is deployed.
     * 
     * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
     */
    @Override
    public AgreementFactoryContext getFactoryContext()
    {
        // begin-user-code
        return factoryContext;
        // end-user-code
    }

    /**
     * <!-- begin-UML-doc --> <!-- end-UML-doc -->
     * 
     * @param factoryContext
     *            the factoryContext to set
     * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
     */
    @Override
    public void setFactoryContext( AgreementFactoryContext factoryContext )
    {
        // begin-user-code
        this.factoryContext = factoryContext;
        // end-user-code
    }

    /**
     * 
     * @return the negotiation strategy for a particular template
     */
    public INegotiationAction getNegotiationAction()
    {
        return negotiationAction;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.ogf.graap.wsag.server.actions.IAction#getEngine()
     */
    @Override
    public WsagEngine getEngine()
    {
        return engine;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.ogf.graap.wsag.server.actions.IAction#setEngine(org.ogf.graap.wsag.server.engine.WsagEngine)
     */
    @Override
    public void setEngine( WsagEngine engine )
    {
        this.engine = engine;

    }
}
